// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider = "zod-prisma"
    // useDecimalJs             = true // represent the prisma Decimal type using Decimal.js (as Prisma does)
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    /// The unique ID of the user
    id        Int      @id @default(autoincrement())
    /// The unique DID used by Magic for authentication
    did       String   @unique @db.VarChar(51) /// @zod.regex(/^did:ethr:0x[a-fA-F0-9]{40}$/, { message: "Invalide DID von Magic erhalten" })
    /// The user's email address
    email     String   @unique @db.VarChar(60) /// @zod.email({ message: "E-Mail muss valide sein" })
    /// The user's first name
    firstname String   @db.VarChar(20) /// @zod.min(3, { message: "Vorname muss mindestens 3 Zeichen lang sein" }).max(20, { message: "Vorname darf nicht l채nger als 20 Zeichen lang sein" })
    /// The user's last name
    lastname  String   @db.VarChar(20) /// @zod.min(3, { message: "Nachname muss mindestens 3 Zeichen lang sein" }).max(20, { message: "Nachname darf nicht l채nger als 20 Zeichen lang sein" })
    /// This timestamp is updated on every mutation automatically
    updatedAt DateTime @default(now()) @updatedAt
    /// This timestamp is set on creation automatically
    createdAt DateTime @default(now())
}

model Page {
    /// The unique ID of the page
    id         Int          @id @default(autoincrement())
    /// The page's category
    category   PageCategory @relation(fields: [categoryId], references: [id])
    /// The foreign key of the category this page has a relation with
    categoryId Int
    /// The page's title
    title      String       @db.VarChar(20) /// @zod.min(3, { message: "Titel muss mindestens 3 Zeichen lang sein" }).max(20, { message: "Titel darf nicht l채nger als 20 Zeichen lang sein" })
    /// The page's content
    content    String       @db.Text
    /// This timestamp is updated on every mutation automatically
    updatedAt  DateTime     @default(now()) @updatedAt
    /// This timestamp is set on creation automatically
    createdAt  DateTime     @default(now())
}

model PageCategory {
    /// The unique ID of the page category
    id        Int      @id @default(autoincrement())
    /// The pages that belong to this category
    pages     Page[]
    /// The category name
    name      String   @db.VarChar(20) /// @zod.min(3, { message: "Name muss mindestens 3 Zeichen lang sein" }).max(20, { message: "Name darf nicht l채nger als 20 Zeichen lang sein" })
    /// This timestamp is updated on every mutation automatically
    updatedAt DateTime @default(now()) @updatedAt
    /// This timestamp is set on creation automatically
    createdAt DateTime @default(now())
}
