// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider = "zod-prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    /// The unique ID of the user
    uuid      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    /// The unique DID used by Magic for authentication
    did       String   @unique @db.VarChar(51) /// @zod.regex(/^did:ethr:0x[a-fA-F0-9]{40}$/, { message: "Invalide DID von Magic erhalten" })
    /// The user's email address
    email     String   @unique @db.VarChar(60) /// @zod.email({ message: "Invalide E-Mail-Adresse" })
    /// The user's first name
    firstname String   @db.VarChar(20) /// @zod.min(3, { message: "Vorname zu kurz" }).max(20, { message: "Vorname zu lang" })
    /// The user's last name
    lastname  String   @db.VarChar(20) /// @zod.min(3, { message: "Nachname zu kurz" }).max(20, { message: "Nachname zu lang" })
    /// This timestamp is updated on every mutation automatically
    updatedAt DateTime @default(now()) @updatedAt
    /// This timestamp is set on creation automatically
    createdAt DateTime @default(now())
}

model Page {
    /// The unique ID of the page
    uuid         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    /// The page's category
    category     PageCategory @relation(fields: [categoryUUID], references: [uuid])
    /// The foreign key of the category this page has a relation with
    categoryUUID String       @db.Uuid
    /// The page's title
    title        String       @db.VarChar(40) /// @zod.min(3, { message: "Titel zu kurz" }).max(40, { message: "Titel zu lang" })
    /// The page's content
    content      String       @db.Text
    /// This timestamp is updated on every mutation automatically
    updatedAt    DateTime     @default(now()) @updatedAt
    /// This timestamp is set on creation automatically
    createdAt    DateTime     @default(now())
}

model PageCategory {
    /// The unique ID of the page category
    uuid      String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    /// The pages that belong to this category
    pages     Page[]
    /// The category name
    name      String   @db.VarChar(40) /// @zod.min(3, { message: "Name zu kurz" }).max(40, { message: "Name zu lang" })
    /// This timestamp is updated on every mutation automatically
    updatedAt DateTime @default(now()) @updatedAt
    /// This timestamp is set on creation automatically
    createdAt DateTime @default(now())
}
