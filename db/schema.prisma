generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("MYSQL_URL")
}

model User {
    id                         Int                     @id @default(autoincrement())
    firstname                  String                  @db.VarChar(20)
    lastname                   String                  @db.VarChar(20)
    username                   String                  @unique @db.VarChar(22)
    password                   String                  @db.VarChar(96)
    pages                      PagesOnUsers[]
    canBeMutatedBy             CanMutateUsersOnUsers[] @relation("UserCanBeMutatedBy")
    canMutateUsers             CanMutateUsersOnUsers[] @relation("UserCanMutateUsers")
    canMutateUsersSubscription Boolean
    canMutateUsersAssigned     CanMutateUsersOnUsers[] @relation("UserCanMutateUsersAssigned")
    canMutatePages             CanMutatePagesOnUsers[] @relation("UserCanMutatePages")
    canMutatePagesSubscription Boolean
    canMutatePagesAssigned     CanMutatePagesOnUsers[] @relation("UserCanMutatePagesAssigned")
    lastMutatedAt              DateTime                @default(now()) @updatedAt
    createdAt                  DateTime                @default(now())
}

model CanMutateUsersOnUsers {
    parent      User     @relation("UserCanMutateUsers", fields: [parentId], references: [id])
    parentId    Int
    child       User     @relation("UserCanBeMutatedBy", fields: [childId], references: [id])
    childId     Int
    createdBy   User     @relation("UserCanMutateUsersAssigned", fields: [createdById], references: [id])
    createdById Int
    createdAt   DateTime @default(now())

    @@id([parentId, childId])
}

model Page {
    id             Int                     @id @default(autoincrement())
    path           String                  @unique @db.VarChar(40)
    title          String                  @db.VarChar(40)
    content        String                  @db.Text
    users          PagesOnUsers[]
    parent         Page?                   @relation("PageParentChildren", fields: [parentId], references: [id])
    parentId       Int?
    children       Page[]                  @relation("PageParentChildren")
    canBeMutatedBy CanMutatePagesOnUsers[]
    lastMutatedAt  DateTime                @default(now()) @updatedAt
    createdAt      DateTime                @default(now())
}

model PagesOnUsers {
    user      User     @relation(fields: [userId], references: [id])
    userId    Int
    page      Page     @relation(fields: [pageId], references: [id])
    pageId    Int
    createdAt DateTime @default(now())

    @@id([userId, pageId])
}

model CanMutatePagesOnUsers {
    user        User     @relation("UserCanMutatePages", fields: [userId], references: [id])
    userId      Int
    page        Page     @relation(fields: [pageId], references: [id])
    pageId      Int
    createdBy   User     @relation("UserCanMutatePagesAssigned", fields: [createdById], references: [id])
    createdById Int
    createdAt   DateTime @default(now())

    @@id([userId, pageId])
}
